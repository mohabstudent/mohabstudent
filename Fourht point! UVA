// 20.03.1 project By MOHABSTUDENT 2022
// V 0.2
//Incrementally thinking - Development & Testing
//#define ONLINE_JUDGE
#define CRT_SECURE_NO_WARNINGS
#define CRT_NONSTDC_NO_WARNINGS

#include <bits/stdc++.h>
#define cct int t=1;cin>>t;while(t--)
#define ye1 cout<<"YES\n";
#define no1 cout<<"NO\n";
#define all(a) (a).begin(),(a).end()
#define all1(a) (a).rbegin(),(a).rend()
#define sz(s) (s).size()
#define fr1(i,begin,end) for(int i=begin;i<end;i++)
#define en "\n"
#define SS second
#define FF first
#define PB push_back
#define dou(x) cout<<fixed<<setprecision((x));
#define f(n) (((n)*(n))+(100*(n))+((n)/3))
#define ffff cout<<"\n=============\n";
using namespace std;
using std::setw;
const int MOD=1e9+7;
const int NN=1e5+1;
const int MAX=200005;
const double PI=3.14159265;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
ll Sum1(ll n)                       {return n*(n+1)/2;}
ll Sum2(ll n)                       {return (n*(n+1))*(2*n+1)/6;}
ll gcd(ll a,ll b)                   {return __gcd(a,b);}
ll lcm(ll a,ll b)                   {return (a*b)/gcd(a,b);}
ll squares(ll a,ll b)               {if(a>b)swap(a,b); return a*(a+1)*(2*a+1)/6+(b - a)*a*(a + 1)/2;}
ll binary_searc(int a[],int n,int x){int l=0,r=n-1,mid;bool f=0;while(l<=r){mid=(l+r)/2;if(a[mid]>x){r=mid-1;}else if(a[mid]<x){ l=mid+1;}else {f=1;break;}}if(f){return mid;}return -1;}
ll sum_divisors(int n)              {ll result=0;if(n==1){return result;}for(ll i=2;i<=sqrt(n);i++){if(n%i==0){result+=(i==(n/i)?i:(i+(n/i)));}}return (result +1);}
bool is_vowel(char c)               {c=(c<'a'?(c+32):c);if(c=='a'||c=='o'||c=='u'||c=='i'||c=='e'||c=='y'){return true;}else return false;}
template<typename T>void print(T a){cout<<a<<"\n";}
void check(bool f)                  {if(f){ ye1} else no1}
void sieve()                        {int const n=(int)1e6;bool is_prime[n];is_prime[1] = false;memset(is_prime,1,sizeof(is_prime));for(int i=2; i*i<n; i++){if(is_prime[i]==1){for(int j=i*i; j<n; j+=i)is_prime[j]=false;}}}
bool lucky_number(int n)            {int x=n;bool f=1;while(x){if(x%10!=7&&x%10!=4){f=0;}x/=10;}return f;}
bool palindrome(string s)           {int x=s.size()-1;for(int i=0;i<s.size()/2;i++){if(s[i]!=s[i+x]){return false;}x-=2;}return true;}
bool valid(int i,int j,int n)       {return i>=0&&j>=0&&i<n&&j<n;}
void Google(int t)                  {cout<<"Case "<<t<<": ";}
void fast()                         {ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL);}
void file()
{
    freopen("file.txt","r",stdin);
    freopen("file.txt","w",stdout);
    // ofstream f("file.txt");
    //ifstream ff("file.txt");
}
#define min(x, y) ((x) < (y) ? (x) : (y))
#define max(x, y) ((x) > (y) ? (x) : (y))
bool prim(ll n)
{
    if(n==2)
        return true;
    if(n<2||n%2==0)return false;
    for(int i=3; i<=sqrt(n); i+=2)
        if(n%i==0)
            return false;
    return true;
}
ll sum_digit(int n)
{
    if(n==0)return 0;
    return n%10+sum_digit(n/10);
}

double toDegreeFromMinutes(double minutes)
{
    return (minutes/60);
}
double toRadians(double degree)
{
    return (degree*PI/100.0);
}
double toDegree(double radian)
{
    if(radian < 0)radian+=2*PI;
    return (radian*100/PI);
}
double fix_angle(double A)
{
    return A>1?1:(A<-1?-1:A);
}
// cos(A)*180/PI in degrees
// sin(A)/a=sin(B)/b=sin(C)/c
double getSide_a_bAB(double b,double A,double B)
{
        return (sin(A)*b)/sin(B);
}
double getAngle_A_abB(double a,double b,double B)
{
    return asin(fix_angle( (a*sin(B))/b ));
}
// a^2=b^2+c^2-2*b*c*cos(A)
double getAngle_A_abc(double a,double b,double c)
{
    return acos( fix_angle( (b*b+c*c-a*a )/(2*b*c) ) );
}
int main()
{
    fast();
     double x1,y1,x2,y2,x3,y3,x4,y4;
    double x,y;

    while(cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4){
        if(x1==x3 && y1==y3){
            x=x2+x4-x3;
            y=y2+y4-y3;
        }else if(x1==x4 && y1==y4){
            x=x2+x3-x4;
            y=y2+y3-y4;
        }else if(x2==x3 && y2==y3){
            x=x1+x4-x3;
            y=y1+y4-y3;
        }else{
            x=x1+x3-x4;
            y=y1+y3-y4;
        }
dou(3);
        cout<<x<<" "<<y<<en;
    }
    return 0;
}
/**

**/
